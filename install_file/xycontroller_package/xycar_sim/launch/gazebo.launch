<?xml version="1.0"?>
<launch>
	<!-- Based on https://github.com/ros/urdf_sim_tutorial/blob/master/launch/gazebo.launch from the guide http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo -->

	<arg name="world_name" default="xycar" />
	<arg name="gui" default="true" />
	<arg name="run_camera" default="false"/>

	<!-- Open Gazebo with specified World model -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find xycar_sim)/worlds/$(arg world_name).world"/>
		<arg name="gui" value="$(arg gui)"/>
		<arg name="debug" value="false" />
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="headless" value="false"/>
	</include>	

	<!-- urdf xml robot description loaded on the Parameter Server (for use in RViz) - this also converts the xacro into a proper urdf file -->
	<param name="robot_description" textfile ="$(find xycar_sim)/urdf/xycar.urdf" />
	<param name="use_gui" value="$(arg gui)"/>

	<!-- Spawn RC car in Gazebo -->
	<node name="xycar_spawn" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model xycar -z 0.05" respawn="false" output="screen" /> <!-- make sure model name matches the robot name in the xacro file -->

	<!-- We can either develop our own controllers for the actuators or use the built in types as below -->
	<!-- See especially: http://gazebosim.org/tutorials/?tut=ros_control -->
	<!-- If we want to develop our own controllers, take a look at Chapter 6 in Mastering ROS for Robotics Programming: https://www.packtpub.com/mapt/book/hardware_and_creative/9781783551798/6/ch06lvl1sec47/writing-a-basic-real-time-joint-controller-in-ros -->
<rosparam file="$(find xycar_sim)/config/controllers.yaml" command="load"/> <!-- Load joint controller configurations from YAML file to parameter server -->
  <node name="controller_manager" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/xycar" args="rear_right_wheel_velocity_controller rear_left_wheel_velocity_controller front_right_wheel_velocity_controller front_left_wheel_velocity_controller front_right_hinge_position_controller front_left_hinge_position_controller joint_state_controller"/>

	<!-- calculate and publish the tf's for each joint based on the urdf file within robot_description -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
		<param name="publish_frequency" type="double" value="50.0" />
		<remap from="/joint_states" to="/xycar/joint_states" /> <!-- this line is very important for visualization in RVIZ when used in conjunction with Gazebo (because of the namespace change) -->
	</node>


	<!-- rviz display -->
	<node name="rviz_visualizer" pkg="rviz" type="rviz" required="true" args="-d $(find xycar_sim)/rviz/xycar.rviz"/>

<!--	<node pkg="jetsoncar_gazebo" name="jetsoncar_encoder_node" type="encoder.py"/>-->

	<!--<node pkg="jetsoncar_gazebo" name="gazebo_odometry_node" type="gazebo_odometry.py"/>-->

	<node pkg="xycar_sim" name="gazebo_test_commands" type="test_commands.py"/>
</launch>
